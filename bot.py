import os
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.enums import ChatType
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.markdown import hbold
from aiogram.client.session.aiohttp import AiohttpSession

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

# Storage & Bot setup
storage = MemoryStorage()
session = AiohttpSession()
bot = Bot(token=API_TOKEN, session=session)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# Ma'lumotlar
admin_cards = {}  # group_id -> {'admin_id': int, 'card_number': str}
user_access = {}  # user_id -> expiry_date (datetime)

# /start
@router.message(F.text.startswith("/start"))
async def start_handler(message: Message):
    await message.answer(
        "üëã –ü—É–ª –¢—û–ª–æ–≤ –±–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑!\n"
        "–ë—É –±–æ—Ç –æ—Ä“õ–∞–ª–∏ –≥—É—Ä—É“≥–≥–∞ —Ä–µ–∫–ª–∞–º–∞ –±–µ—Ä–∏—à —É—á—É–Ω —Ç—û–ª–æ–≤ “õ–∏–ª–∏–Ω–≥.\n\n"
        "/setcard - –∫–∞—Ä—Ç–∞ “õ—û—à–∏—à\n"
        "/pay - —Ç—û–ª–æ–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–∏–Ω–∏ —é–±–æ—Ä–∏—à"
    )

# /setcard
@router.message(F.text.startswith("/setcard"))
async def set_card(message: Message):
    if message.chat.type != ChatType.SUPERGROUP:
        await message.reply("–ë—É –±—É–π—Ä—É“õ–Ω–∏ —Ñ–∞“õ–∞—Ç –≥—É—Ä—É“≥–¥–∞ –∏—à–ª–∞—Ç–∏–Ω–≥.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–ö–∞—Ä—Ç–∞ —Ä–∞“õ–∞–º–∏–Ω–∏ “≥–∞–º —ë–∑–∏–Ω–≥. –ú–∞—Å–∞–ª–∞–Ω: /setcard 8600...")
        return
    admin_cards[message.chat.id] = {
        "admin_id": message.from_user.id,
        "card_number": args[1]
    }
    await message.reply(f"üí≥ –ö–∞—Ä—Ç–∞ —Å–∞“õ–ª–∞–Ω–¥–∏: {args[1]}")

# /pay
@router.message(F.text.startswith("/pay"))
async def pay_handler(message: Message):
    if message.chat.type != ChatType.SUPERGROUP:
        await message.reply("–ë—É –±—É–π—Ä—É“õ–Ω–∏ —Ñ–∞“õ–∞—Ç –≥—É—Ä—É“≥–¥–∞ –∏—à–ª–∞—Ç–∏–Ω–≥.")
        return
    if message.reply_to_message and message.reply_to_message.photo:
        admin_data = admin_cards.get(message.chat.id)
        if admin_data:
            file_id = message.reply_to_message.photo[-1].file_id
            caption = f"üßæ –Ø–Ω–≥–∏ —Ç—û–ª–æ–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–∏ @{message.from_user.username or message.from_user.full_name}"
            await bot.send_photo(admin_data["admin_id"], file_id, caption=caption)
            await message.reply("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —é–±–æ—Ä–∏–ª–¥–∏, –∞–¥–º–∏–Ω —Ç–∞—Å–¥–∏“ì–∏–Ω–∏ –∫—É—Ç–∏–± —Ç—É—Ä–∏–Ω–≥.")
        else:
            await message.reply("‚ùå –ê–¥–º–∏–Ω “≥–∞–ª–∏ –∫–∞—Ä—Ç–∞ —û—Ä–Ω–∞—Ç–º–∞–≥–∞–Ω.")
    else:
        await message.reply("–ò–ª—Ç–∏–º–æ—Å, —Å–∫—Ä–∏–Ω—à–æ—Ç–Ω–∏ —Ä–∞—Å–º–≥–∞ –∂–∞–≤–æ–± —Å–∏—Ñ–∞—Ç–∏–¥–∞ —é–±–æ—Ä–∏–Ω–≥.")

# /approve
@router.message(F.text.startswith("/approve"))
async def approve_user(message: Message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        user_access[user_id] = datetime.now() + timedelta(days=30)
        await message.reply("‚úÖ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ 1 –æ–π–ª–∏–∫ “≥—É“õ—É“õ –±–µ—Ä–∏–ª–¥–∏.")
    else:
        await message.reply("–ö–∏–º–≥–∞–¥–∏—Ä –∂–∞–≤–æ–± “õ–∏–ª–∏–± /approve —ë–∑–∏–Ω–≥.")

# Foydalanuvchi xabar–ª–∞—Ä–∏
@router.message()
async def check_access(message: Message):
    if message.chat.type == ChatType.SUPERGROUP:
        expiry = user_access.get(message.from_user.id)
        if expiry:
            if datetime.now() > expiry:
                del user_access[message.from_user.id]
                await message.reply("‚ùå –°–∏–∑–Ω–∏–Ω–≥ 1 –æ–π–ª–∏–∫ –º—É“≥–ª–∞—Ç–∏“£–∏–∑ —Ç—É–≥–∞–¥–∏.")
        else:
            await message.reply("‚õî –†–µ–∫–ª–∞–º–∞ –±–µ—Ä–∏—à —É—á—É–Ω –∞–¥–º–∏–Ω–≥–∞ —Ç—û–ª–æ–≤ “õ–∏–ª–∏–Ω–≥.")

# Ishga tushirish
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())


