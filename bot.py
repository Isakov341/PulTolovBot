
import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InputFile
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Memory storage
admin_cards = {}
user_access = {}

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.reply("üëã –ü—É–ª –¢—û–ª–æ–≤ –±–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑!
/setcard - –∫–∞—Ä—Ç–∞ “õ—û—à–∏—à
/pay - —Ç—û–ª–æ–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–∏–Ω–∏ —é–±–æ—Ä–∏—à")

@dp.message_handler(commands=['setcard'])
async def set_card(message: types.Message):
    if message.chat.type != "supergroup":
        await message.reply("–ë—É –±—É–π—Ä—É“õ–Ω–∏ —Ñ–∞“õ–∞—Ç –≥—É—Ä—É“≥–¥–∞ –∏—à–ª–∞—Ç–∏–Ω–≥.")
        return
    admin_cards[message.chat.id] = {
        "admin_id": message.from_user.id,
        "card_number": message.get_args()
    }
    await message.reply(f"üí≥ –ö–∞—Ä—Ç–∞ —Å–∞“õ–ª–∞–Ω–¥–∏: {message.get_args()}")

@dp.message_handler(commands=['pay'])
async def pay_handler(message: types.Message):
    if message.chat.type != "supergroup":
        await message.reply("–ë—É –±—É–π—Ä—É“õ–Ω–∏ —Ñ–∞“õ–∞—Ç –≥—É—Ä—É“≥–¥–∞ –∏—à–ª–∞—Ç–∏–Ω–≥.")
        return
    if message.reply_to_message and message.reply_to_message.photo:
        if message.chat.id in admin_cards:
            admin_id = admin_cards[message.chat.id]["admin_id"]
            file_id = message.reply_to_message.photo[-1].file_id
            await bot.send_photo(admin_id, file_id, caption=f"üßæ –Ø–Ω–≥–∏ —Ç—û–ª–æ–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–∏ @{message.from_user.username}")
            await message.reply("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —é–±–æ—Ä–∏–ª–¥–∏, –∞–¥–º–∏–Ω —Ç–∞—Å–¥–∏“ì–∏–Ω–∏ –∫—É—Ç–∏–± —Ç—É—Ä–∏–Ω–≥.")
        else:
            await message.reply("‚ùå –ê–¥–º–∏–Ω “≥–∞–ª–∏ –∫–∞—Ä—Ç–∞ —û—Ä–Ω–∞—Ç–º–∞–≥–∞–Ω.")
    else:
        await message.reply("–ò–ª—Ç–∏–º–æ—Å, —Å–∫—Ä–∏–Ω—à–æ—Ç–Ω–∏ —Ä–∞—Å–º–≥–∞ –∂–∞–≤–æ–± —Å–∏—Ñ–∞—Ç–∏–¥–∞ —é–±–æ—Ä–∏–Ω–≥.")

@dp.message_handler(commands=['approve'])
async def approve_user(message: types.Message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        user_access[user_id] = datetime.now() + timedelta(days=30)
        await message.reply("‚úÖ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ 1 –æ–π–ª–∏–∫ “≥—É“õ—É“õ –±–µ—Ä–∏–ª–¥–∏.")
    else:
        await message.reply("–ö–∏–º–≥–∞–¥–∏—Ä –∂–∞–≤–æ–± “õ–∏–ª–∏–± /approve —ë–∑–∏–Ω–≥.")

@dp.message_handler()
async def check_access(message: types.Message):
    if message.chat.type == "supergroup":
        if message.from_user.id in user_access:
            if datetime.now() > user_access[message.from_user.id]:
                del user_access[message.from_user.id]
                await message.reply("‚ùå –°–∏–∑–Ω–∏–Ω–≥ 1 –æ–π–ª–∏–∫ –º—É“≥–ª–∞—Ç–∏“£–∏–∑ —Ç—É–≥–∞–¥–∏.")
        else:
            await message.reply("‚õî –†–µ–∫–ª–∞–º–∞ –±–µ—Ä–∏—à —É—á—É–Ω –∞–¥–º–∏–Ω–≥–∞ —Ç—û–ª–æ–≤ “õ–∏–ª–∏–Ω–≥.")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
